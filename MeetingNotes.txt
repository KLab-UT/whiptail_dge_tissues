10 Oct 2024
    Randy added a script called stats_and_plots.r that takes the data csv files (mito_variants_updated.csv and no_mito_variants.csv) and creates plots to compare the allele-biased expression in mito genes and non_mito genes.
    (We should be using the files with the <rd> prefix for downstream analysis, as they are in the proper format)
    Action items:
        1. Create a text file called "37_mito_genes.csv" that contains all of genes within the mitochondrial genome and the encoded product (protein, RNA) in two columns called "MitoGene" and "EncodedProduct"
        2. Create a text file called "nucmt_interactions.csv" that contains four fields: the "GeneName" (this is the name of our gene; it may be repeated throughout the file for each interaction the gene has), "Interaction" (the name of the gene being interacted with; this may be repeated in different lines for different "GeneNames" [i.e., multiple genes in GeneName might interact with the same gene]), "EncodedProduct" (protein, RNA), and InteractionType" (if this is available- if not, just leave this last one off)
        3. We then need to iterate through the nucmt_interactions.csv file and check each line to see if the "Interaction" line contains gene names that are present in the "MitoGene" line of "37_mito_genes.csv". If there is a match, then the whole row from nucmt_interactions.csv should be copied to the file "mitonuclear_interactions.csv"
        ~~4. The "no_mito_variants_updated.csv" file states that all the genes are "Mito". This needs to be changed in the script that generates this file.~~
        (This issue has been resolved 2 weeks ago, reference rd_no_mito_variants_updated and rd_mito_variants_updated)


26 Sep 2024
    We forgot to mark duplicates, so we need to go upstream in the pipeline to do this. This should be the step immediately following the "merge_merged_and_unmerged_merges" step (which was after mapping reads). In other words, the Am_{i}.bam files need to be ran through a function that marks duplicates in a newly-output bam file
    This can be done using picard tools, which is a module available on the CHPC. Here is how to use it:

        module load picard
        java -Xmx8g -jar $PICARD MarkDuplicates \
        REMOVE_DUPLICATES=true \
        I=Am_${i}.bam \
        O=Am_${i}_removed_duplicates.bam \
        M=Am_${i}_marked_dup_metrics.txt \

    The output from this can then be used to call SNPs

19 Sep 2024
    Baylee created a csv called "combined_variants.csv" that contained all of the variants for each of the individuals 1-15 and 25-27. Randy forgot that these weren't different individuals, rather they were many of the same individuals with different tissues. So to add that information, we included a excel file under "sample_info" that has the connection between the sample ID (the excel file includes Am_ in the name), the Field ID (marked as "Sample" in the excel file) and the tissue type.
    Using a few R commands, I added the field ID, tissue type, and gene type to the combined_variants.csv. I used the CSV that is currently in the same directory as the .vcf and is called "sample_info.csv". Currently the new file is called updated_combined_variants.csv. Here are the R commands I used:

    > combined_variants <- read.csv("combined_variants.csv", stringsAsFactors = FALSE)
    > sample_info <- read.csv("sample_info.csv", stringsAsFactors = FALSE)
    > merged_data <- merge(combined_variants, sample_info, by = "SampleID", all.x = TRUE)
    > merged_data$GeneType <- "Mito"
    > write.csv(merged_data, "updated_combined_variants.csv", row.names = FALSE)

    Action items:a
    0. Add R code to your scripts (so that the CSVs being output have the new fields "GeneType", "Tissue", and "FieldTag")
      -- Remember that these R scripts include the sample_info.csv, so you'll want to put that somewhere in the github repository where it can be securely stored and referenced
      -- Also, change math so that DeltaAD field in the CSV is RefAD - AltAD
    1. Rename combined_variants.csv to mito_combined_variants.csv
    2. Create CSV for nonmito variants (named nonmito_combined_variants.csv)
    3. Merge mito_combined_variants.csv and nonmito_combined_variants.csv into new CSV called combined_variants.csv
    4. Create new CSV called 'DeltaAD_averages.csv' that only has fields "Chromosome", "Position", "Gene", "GeneType", "RefAD", "AltAD", "DeltaAD"
    5. Remove duplicate rows from DeltaAD_averages.csv

    Bonus item:
    Create Box and whisker plot with categories "Mito" and "NonMito" that plots the DeltaAD values from DeltaAD_averages.csv

13 Sep 2024

    To quantify allele-biased allele expression, we will look at the values of DP4 in the VCF. This value shows the depth of coverage for each allele, with the first two values being the depth for the reference allele (fwd and rev) and the second two values being the depth for the alternate allele (fwd and rev).

    In order to calculate these, we will pull the values from each individual in the filtered vcf. However, this filtered vcf should NOT have gone through a filtration step that filters based on mapping quality (which would introduce a bias towards the reference allele). Also, this vcf should have the combined information from all samples for a single tissue (i.e., there should be a merged vcf for each tissue type).

    The output from this data collection should be a CSV for each tissue type constructed as follows:

    File name:
    Liver.csv
    Contents:
    SampleID,Chromosome,Position,Mito,RefAD,AltAD,DeltaAD
    Am_01,Chr_1,245232,1,240,222,18

    File name:
    Heart.csv
    Contents:
    SampleID,Chromosome,Position,Mito,RefAD,AltAD,DeltaAD
    Am_01,Chr_1,245232,1,123,122,-1

    The RefAD should be the sum of the first two DP4 values. The AltAD should be the sum of the second two DP4 values. The DeltaAD field should be the value of AltAD - RefAD. Thought: We should also consider only keeping SNPs where all individuals are represented (e.g., there is no missing data).

    After creating a csv for each tissue type, we will want to combine all of these and add a "TissueType" field to the combined csv:

    File name:Combined.csv

    SampleID,Chromosome,Position,Mito,RefAD,AltAD,DeltaAD
    Am_01,Chr_1,245232,1,240,222,18

# Questions:

1. Do you need to modify script so it keeps our new files we are adding?
2. Retaining the 'EFTS' from each gff file... hope that is correct
Chr_2	AUGUSTUS gene 151270976 151279377 . + . ID=Marm_12464;blast_id="sp|P43897|EFTS_HUMAN";interproscan_id="IPR001816
";eggnog_id="translation_elongation_factor_activity"


05 Sep 2024

We need to:
1- filter variants for quality
2- convert the MiCFiG GFF to a BED file
3- filter variants for position

Useful code for each of these can be found on an old script I wrote: https://github.com/rklabacka/ThamnophisElegans_FunctionalGenomics2021/blob/main/Examining-Sequence-Variation/reads2vcf/reads2vcf.sh

For step 1, use the function "hard-variant-filtration" function to filter variants (you can skip step 3).

For step 2, convert the GFF from MiCFiG to a BED file. You can do this using bedops, then you need to bgzip and index it. All of this done in the function "probes2gff" (after the "# Use bedops to convert gff to bed" comment).

For step 3, we will want two resulting files: (i) variants in mitochondrial-targetting genes [those specified in the MiCFiG GFF] and (ii) variants in all other genes [all genes not specified in the MiCFiG GFF]

Use the "annotate-variants" function to filter variants based on genes of interest. The awk command at the end of the script removes all variants lacking annotation. You can modify this to exclude any variants containing annotations. Doing both of these will allow you to get both of the vcf files that we need.


03 Sep 2024

Baylee's addition:
The purpose of this research is to find the differences in mitochondrial gene expression from the paternal vs. maternal lineage. A. Scalaris and A. Marmoratus came together and produces the asexual species A. tesselatus. A tesselatus retains the paternal alleles of the mitochondrial genes, so we are doing this research to determine if these expression levels are different with genes that originate from both the maternal and paternal alleles.
We will not be able to separate all gene expression levels based of the maternal/paternal allele, because we are using a variant caller to see the differences between tesselatus and marmoratus. The SNPS with variants are those that we know originate from scalaris. Some gene expression levels we will be unable to distinguish from another in the scenarios where mamoratus and tesselatus have no mutations between the genes.

26 Aug 2024
Baylee is going to look into using BCFtools to call SNPs from the BAM files. To do this, check out the bcftools documentation: https://samtools.github.io/bcftools/howtos/variant-calling.html
From the output bcf file (or vcf file), we will want to exclude all genes not targetting the mitochondrion. We will use MiCFiG to provide the regions of interest, and then we can use the coordinates of those regions to filter the vcf file.
From there, we will want to combine the vcf data (the snp data) with the gene count data to identify regions where there has been allele-biased expression.
Action items just for this week:
call variants


